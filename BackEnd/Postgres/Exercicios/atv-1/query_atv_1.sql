-- Crie uma tabela chamada clientes com as colunas: id, nome, email e telefone, idade.

-- Adicione cinco registros à tabela clientes com informações fictícias, 
-- garantindo que cada registro tenha um valor único para o campo id.

-- Crie uma tabela chamada produtos com as colunas: codigo, nome, preco e quantidade.

-- Insira três registros na tabela produtos com informações fictícias.

-- Crie uma tabela chamada itens com as colunas: id, codigo_produto, id_cliente e quantidade.

-- Adicione cinco itens à tabela itens, relacionando-os a clientes existentes e 
-- produtos disponíveis.

-- Criar no mínimo duas Views com propostas interessantes ao usuário visualizar.

--SELECT * FROM CLIENTES
CREATE TABLE IF NOT EXISTS CLIENTES(
	NUM_ID SERIAL NOT NULL,
	NOME_CLIENTE VARCHAR(60) NOT NULL,
	EMAIL VARCHAR(60) NOT NULL,
	TELEFONE VARCHAR(60) NOT NULL,
	IDADE INT NOT NULL,
	--CHAVE PRIMARIA
	CONSTRAINT CLIENTES_PK PRIMARY KEY(NUM_ID)
);

ALTER TABLE CLIENTES ADD CONSTRAINT EMAIL_UNICO UNIQUE (EMAIL);
ALTER TABLE CLIENTES ADD CONSTRAINT TELEFONE_UNICO UNIQUE (TELEFONE);

--DROP TABLE CLIENTES;
INSERT INTO CLIENTES (NOME_CLIENTE, EMAIL, TELEFONE, IDADE) VALUES
	('João', 'joao@example.com', '99434-5678', 30),
	('Maria', 'maria@example.com', '98845-6789', 25),
	('Fabricio', 'fabricio@example.com', '99346-7890', 31),
	('Felipe', 'felipe@example.com', '99456-8901', 37),
	('Nizia', 'nizia@example.com', '99467-9012', 58)

--SELECT * FROM PRODUTOS
CREATE TABLE IF NOT EXISTS PRODUTOS(
	CODIGO_PRODUTO SERIAL NOT NULL,
	NOME_PRODUTO VARCHAR(60) NOT NULL
	PRECO_PRODUTO DECIMAL(10, 2) NOT NULL,
	QUANTIDADE_PRODUTO INT NOT NULL,
	--CHAVE PRIMARIA
	CONSTRAINT PRODUTOS_PK PRIMARY KEY (CODIGO_PRODUTO)
);

UPDATE PRODUTOS SET QUANTIDADE_PRODUTO = 15 WHERE CODIGO_PRODUTO = 3
UPDATE PRODUTOS SET 
	NOME_PRODYO = 'Camisa do Cruzeiro',
	QUANTIDADE_PRODUTO = 15,
	PRECO = 250.00
WHERE CODIGO = 3

DELETE FROM PRODUTOS WHERE CODIGO = 3

--DROP TABLE PRODUTOS
INSERT INTO PRODUTOS (NOME_PRODUTO, PRECO_PRODUTO, QUANTIDADE_PRODUTO) VALUES
	('Camisa do Grêmio', '329.90', '10'),
	('Camisa do Flamengo', '199.90', '45'),
	('Camisa do Internacional','10.00', '50')

--SELECT * FROM ITENS
CREATE TABLE IF NOT EXISTS ITENS(
	ID_ITENS SERIAL NOT NULL,
	CODIGO_PRODUTO INT,
	ID_CLIENTE INT,
	QUANTIDADE_ITENS INT NOT NULL,
	--CHAVE PRIMARIA
	CONSTRAINT ITENS_PK PRIMARY KEY (ID_ITENS),
	--CHAVE ESTRANGEIRA
	CONSTRAINT ITENS_CODIGO_PRODUTO_FK FOREIGN KEY (CODIGO_PRODUTO)
	REFERENCES PRODUTOS (CODIGO_PRODUTO),
	CONSTRAINT ITENS_ID_CLIENTE_FK FOREIGN KEY (ID_CLIENTE)
	REFERENCES CLIENTES (NUM_ID)
);

--TABLE DROP ITENS
INSERT INTO ITENS (CODIGO_PRODUTO, ID_CLIENTE, QUANTIDADE_ITENS) VALUES
	(3, 2, 3),
	(2, 1, 5),
	(1, 3, 4),
	(1, 5, 3),
	(1, 4, 2)

-- VIEW DE LISTA DE COMPRAS DE CADA CLIENTES
--SELECT * FROM VIEW_CLIENTE_COMPRAS
CREATE VIEW VIEW_CLIENTE_COMPRAS AS
SELECT 
    c.NUM_ID, 
    c.NOME_CLIENTE, 
    c.EMAIL , 
    p.NOME_PRODUTO, 
    i.QUANTIDADE_ITENS
FROM 
    CLIENTES c
JOIN 
    ITENS i ON c.NUM_ID = i.ID_CLIENTE
JOIN 
    PRODUTOS p ON i.CODIGO_PRODUTO = p.CODIGO_PRODUTO;

--VIEW COM VALOR TOTAL DAS COMPRAS DE CADA CLIENTE
--SELECT * FROM VIEW_GASTO_TOTAL
CREATE VIEW VIEW_GASTO_TOTAL AS
SELECT
	c.NUM_ID,
	c.NOME_CLIENTE,
	p.NOME_PRODUTO,
	p.PRECO_PRODUTO,
	i.QUANTIDADE_ITENS,

	ROUND(SUM(p.PRECO_PRODUTO * i.QUANTIDADE_ITENS), 2) AS TOTAL
FROM
	CLIENTES c
JOIN
	ITENS i ON c.NUM_ID = i.ID_CLIENTE
JOIN 
    PRODUTOS p ON i.CODIGO_PRODUTO = p.CODIGO_PRODUTO
GROUP BY
	c.NUM_ID, c.NOME_CLIENTE, p.NOME_PRODUTO, p.PRECO_PRODUTO, i.QUANTIDADE_ITENS;

--VISUALIZAR O ESTOQUE DE PRODUTOS COM A QUANTIDADE TOTAL VENDIDA
--SELECT * FROM PRODUTOS_ESTOQUE_VENDAS
CREATE VIEW PRODUTOS_ESTOQUE_VENDAS AS
SELECT
	p.NOME_PRODUTO,
	p.QUANTIDADE_PRODUTO AS ESTOQUE,
	COALESCE(SUM(i.QUANTIDADE_ITENS),0) AS TOTAL_VENDIDO
FROM
	PRODUTOS p
LEFT JOIN
	ITENS i ON p.CODIGO_PRODUTO = i.CODIGO_PRODUTO
GROUP BY
	p.NOME_PRODUTO, p.QUANTIDADE_PRODUTO